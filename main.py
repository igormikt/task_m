class Task:
    def __init__(self, description, deadline):
        self.description = description
        self.deadline = deadline
        self.completed = False  # –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞

    def mark_completed(self):
        self.completed = True

    def __str__(self):
        status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if self.completed else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
        return f"{self.description} (–¥–æ {self.deadline}) ‚Äî {status}"


tasks = []  # —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á

def add_task(description, deadline):
    task = Task(description, deadline)
    tasks.append(task)

def show_uncompleted_tasks():
    print("üìã –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
    for i, task in enumerate(tasks):
        if not task.completed:
            print(f"{i + 1}. {task}")

def complete_task(task_number):
    if 0 < task_number <= len(tasks):
        tasks[task_number - 1].mark_completed()
        print("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
    else:
        print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")


add_task("–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ", "2025-06-10")
add_task("–°–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", "2025-06-09")

show_uncompleted_tasks()
complete_task(1)
show_uncompleted_tasks()
